import os
import requests
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

from langchain_community.vectorstores import FAISS
from langchain_google_genai import GoogleGenerativeAIEmbeddings

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
if not api_key:
    raise EnvironmentError("‚ùå Thi·∫øu GOOGLE_API_KEY trong file .env")

# Load FAISS VectorStore
embedding = GoogleGenerativeAIEmbeddings(model="models/embedding-001")
db = FAISS.load_local("faiss_yhgn_db", embedding,
                      allow_dangerous_deserialization=True)
print("‚úÖ FAISS Vector Store ƒë√£ ƒë∆∞·ª£c t·∫£i")

# T·∫°o FastAPI app
app = FastAPI(title="YHGN Assistant API")

# Schema cho request body


class QuestionRequest(BaseModel):
    query: str

# H√†m g·ªçi Gemini n·∫øu c·∫ßn


def generate_from_prompt(prompt: str) -> str:
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={api_key}"
    headers = {"Content-Type": "application/json"}
    body = {
        "contents": [
            {
                "parts": [{"text": prompt}]
            }
        ]
    }
    try:
        response = requests.post(url, headers=headers, json=body)
        response.raise_for_status()
        return response.json()["candidates"][0]["content"]["parts"][0]["text"]
    except Exception as e:
        print("üåê L·ªói k·∫øt n·ªëi Gemini API:", e)
        return "‚ùå Kh√¥ng th·ªÉ l·∫•y c√¢u tr·∫£ l·ªùi t·ª´ Gemini."

# H√†m t·∫°o prompt


def create_prompt(query: str, docs: list) -> str:
    context = "\n\n".join([doc.page_content for doc in docs])
    return f"""
B·∫°n l√† tr·ª£ l√Ω chuy√™n ng√†nh Y h·ªçc Gi·∫•c ng·ªß, d·ª±a v√†o t√†i li·ªáu d∆∞·ªõi ƒë√¢y ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa h·ªçc vi√™n trong ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o 6 th√°ng do H·ªôi Y h·ªçc Gi·∫•c ng·ªß Vi·ªát Nam t·ªï ch·ª©c.

D·ªØ li·ªáu t√†i li·ªáu:
{context}

C√¢u h·ªèi: "{query}"

H√£y tr·∫£ l·ªùi r√µ r√†ng, ƒë√∫ng chuy√™n m√¥n, m·∫°ch l·∫°c v√† s√∫c t√≠ch b·∫±ng ti·∫øng Vi·ªát.
"""

# Endpoint ch√≠nh


@app.post("/ask")
def ask_question(data: QuestionRequest):
    query = data.query.strip()
    if not query:
        raise HTTPException(
            status_code=400, detail="Query kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.")

    docs = db.similarity_search(query, k=3)
    matched_directly = [
        doc for doc in docs if query.lower() in doc.page_content.lower()]

    if matched_directly:
        return {
            "answer_source": "direct_match",
            "answer": matched_directly[0].page_content
        }
    else:
        prompt = create_prompt(query, docs)
        response = generate_from_prompt(prompt)
        return {
            "answer_source": "gemini",
            "answer": response
        }
